- currently the build of openbook needs PyMySQL to be install
	*in the system python* and not in the virtual env python.
	This is bad. Fix this.
- The page numbers are alternating between right and left and there is really
	no need for that since this is not a book.
	The hint about how to do this is here:
	http://lilypond.1069038.n5.nabble.com/Question-about-page-number-position-and-ornamentation-td136399.html
- test building on macos
	look at:
	https://docs.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners
	at what testing environment for macs github supply.
- on the title page of the book it appears as "Openbook (c)"
	which looks like a copyright sign but is really the key.
	Add the "c" in it's own line "Key: c"
	under "Openbook"
- the stuff which appears in the book which is:
	- website of the book
	- my email on every page.
	is wrong. Fix these things.
- allow rendering to linnstrument (already have a sample of how to do it
	in demos-lilypond).
	same for guitar tabs.
- stop using git in the makefile. It breaks the build from a zip file.
- wrap the pdf.js viewer as a library and use it like that and not like a page (viewer.html).
- currently mark.veltzer@gmail.com is hardcoded all over the mako files.
	Use the config entry instead.
- move all files from src to templates and use pydmt to process them.

- My email is hardcoded in several places:
	in all of the regular tunes as:
		attributes['typesetter']='Mark Veltzer <mark.veltzer@gmail.com>'
	in the israeli tunes as:
		attributes['typesetter']=u'מרק ולצר <mark.veltzer@gmail.com>'
	in the common.ly.mako include files as:
		"<" \with-url #"mailto:mark.veltzer@gmail.com" mark.veltzer@gmail.com ">"
	remove all of this junk and use mako to replace it with my email (either hebrew or not).

- print git shortlog or something on the page of openbook where I list contributions.
	(do it using templating or something).
- some songs have more than one name.
	This is not a subtitle, this is a different name
	Some songs belong to musicals,
	This is not a subtitle, this is a musical.
	Express this info in the meta data of songs and one day we would
	be able to use this info to:
	- put songs with more than one name into the main index more than one time.
	- create an index by musical names.
- move all hebrew songs to the new format for lyrics
	with better alignments.
- auto download all youtube videos to some folder.
- write to the lilypond people and ask them how to correctly write torcacita.
- get the drumming book to look good
	(do < > style drumming patterns and put in more patterns).
- add graphs (of openbook progress) from my blog to the gh-pages website.
- add spell checking on the lyrics of the songs.
- add spell checking on the html pages.
- learn some design and design the front page of openbook better.
- create the CREDITS file using templating for info from git.
- create the LICENSE file using templating and the collection of licensing on the debian based system.
- add to the pdf stuff like the operating system release that this was built on.
- the output pdf still has hardcoded my name, year of start and more.
	make it take it all from config.
- all the checks should be done in python.
	translate them all to python.
- if let say I have a fake book tune and I know it's location
	the location should NOT be in 'attribute['location']' but
	rather in the version so I could associate the external pdf
	with that version (this is not the case now).
	Should we leave the 'location' attribute? I don't know. Think about it.
- upload results to scribd via the scribd api.
	http://www.scribd.com/developers/tutorials
	apparently all you need to do is http upload from the command line
	via curl or some python HTTP library.
- make each tune add into info to some variable instead of set
	the variable.
	This will allow me to use the tunes to create an index and more.
- bring back midi, ogg, wav creation but this time with python scripts.
	just copy the perl scripts.
- 'make all_tunes' doesn't work. fix it.
- make the release manager work again.
	(twitter, facebook and email).
	setup a mailing list for openbook.
- add more funtionality to the attributes class so the common include
	file will be simpler.
- bring back the hyper links in the generated pdf file.
	They are gone now that I'm doing minimization of the pdf file.
- move to a website at some hosting.
- do not allow to compile on the wrong version of lilypond.
	or maybe offer a warning on using the wrong version of
	lilypond?
- make check_all produce a stub and make it a prereq for full build.
- make the check_all be a python script with plugins and such instead
	of multiple greps inside the make file.
- get back to compiling the rock book which does not compile due
	to errors.
- improve the script/lilypond_wrapper to get a --nomidi option
	to disable midi production.
		At first shot do this by removing the midi
		after the lilypond run (just like the perl script).
- move to using the Jazz font in this project.
	or at least allow it via a menu selection.
	https://sites.google.com/site/jpgzic/home/demonstration
	http://lists.gnu.org/archive/html/lilypond-user/2013-03/msg00647.html
	https://sites.google.com/site/jpgzic/home
	and the email I got from vicent (vincent).
- the rockbook creation leaves midi files around. Remove these junk files.
- in the web site the pdf file doesn't always show up properly even if the file
	is updated.
	maybe we should use .htaccess and tell the server not to cache.
	I tried this and it doesn't seem to work.
	try other things.
	This is a problem in firefox, chrome seems to work well.
- check that all tunes have structure markings in them
	(\myMark "A", \myMark "B", etc)
	Do that as part of check_all
- tweeter api does not work. check it out and fix it.
- add the facebook api to release manager and see that it works.

- make the full build also build all the pdfs (not just the ones going into
	the book).
- enable to turn off lyrics and produce a book with lyrics and a book without.
- enable the runner of the build to decide whether \myEndLine will be
	a real break or not. This could reduce the size of the book by
	a lot. Turn the default off so that the book will be lesser in size.
- fix the db import script. turn it into python and use the mako system.
- modify the import script to import the book too
	(in all of its formats: lilypond, postscript, pdf).
- add a license on the first page (select a good license? Creative Commons?)

Hebrew song book:
=================
- tempo markings should be in hebrew.
	produce a hebrew table for tempo and work with that (blog about it?)
- logo for the project.
- table of contents: title needs to be changed to hebrew.
- table of contents: page numbers should be on the left side.
- first page must have different content.
- remove songs which are not ready.
- check the "5" labeled songs to make sure they are ready for publications.

book stuff:
- logo for the project.
- add a nice front page to the book with the name of the project, logo, links etc.

- try to add index by performer, composer, poet, structure, and more.
- get to a good book.
	only publish good tunes.
	put it up on my website.
- do warnings catching in lilypond wrapper.
- do stats about lilypond performance with big files...
	produce a graph.
	send it to the lilypond bugs mailing list.
- I'm not doing inlining in the ly files. This means that the chords, tune
	and other big parts are repeated in the individual ly files more than once.
	I once did it and removed it as part of the effort to build the book.
	Need to bring it back...
	This will keep the size of the .ly files down and will make them more
	editable by hand.
- find out how to give names to various snipplets of notes and thus write less.
	This is related to the previous TODO item.
	This was done in two of the tunes but I removed it because of technical
	difficulties in producing the final book.
	document it in the lilypond hints doc.
- make the footer that I have point to an openbook web page that I need to open.
	Copy the ideas from the mutopia footer.
	Open the webpage at veltzer.org/openbook
	do make install to install the webpage.

parts in the song:
==================
In hebrew I want it to read "helek alef" "ptiha" etc.. In English A, B, Intro...
Make a set of macros and use them.

licensing:
==========
embed a licence in all of the tunes.
Also do it in the Makefile, in the scripts and all.
Add a test which shows which files are without license to check_all.

visuals
=======
- make more tunes fit on one page (reduce sizes of staffs, space between staff and more).
- make the size of the copyright smaller so that I could fit the entire copyright.

youtube links:
==============
support more than one youtube link (there are already a few tunes with more than one youtube link in them).

mako:
=====
- do dependency analysis on it.
- look at some of the lilypond outputs and see that some %% in the source produce just one (%) in the
output. What is that? Take care of it...

config system:
==============
The system will allow users to config which type of tune they want to produce.
They could select:
- scale (C for concert, Bb, Eb for horns etc).
- do they want lyrics?
- font sizes from several configurations and more.
- do they want to produce midi, postscript, pdf, mp3, ogg.
- what tunes do they want to build.

epdfs:
======
- bring more epdfs for the tunes that I already have.
	document how to find those epdfs.
- bring the meta data from the epdfs into the database and show them.
	Where do they come from? (which real book?).
	What page?
- support not just the pdf format but other formats as well.

db importing:
=============
- import only things which are not in the database.
- import in the order of the tune names.
- import my own recordings into the database - look at the tags for more data.
- in the database hold style as foreign keys.
- in the database hold poet as foreign keys.
- in the database hold composer as foreign keys.
- import stuff which is not finished too and add completion column.
- add a php code that does statistics on it to display in the blog.

parsing lilypond:
=================
- there is much to do in this area but no known issues at this time.

build system
============
- make the release script also update progress graphs.
	and also send out message to a mailing list.
- make the release script also save old products by version.
- the making of the book (final book) is run without a lilypond wrapper and as a result
	I do not catch warnings off of it. catch those warnings!
- when building all the products from .ly files (pdf,midi,ps,png) make sure
	to remove ALL products from that .ly files. This is especially true for
	pngs since if a piece shrinks in side the number of the png produced from it
	goes DOWN and so there is a chance of old png hanging around.
- do a general cache (~/.make_cache) script which will run commands for me and will save
	results according to the command line and md5 sum of the source and deps.
	this way changes to the makefile will not do a full recompile.
- make each lily file stand on it's own so that people could use it.
	This means stopping using the lilypond include feature and starting
	to use some kind of marcro processor (with dependency analysis ofcourse).
- make each build make a temp folder so that I could build at the same time.
- add flac support.
- add my own recording of the tune in wav, mp3, flac and ogg for download.
- add "topic" to each piece. Topics at first should be reflections of the directory
	the piece is in. Add it to the database.
- make sure the build system checks that each file has the right tags at the header
	in the right order (whats the best way to do this?!?).
- create compressed postscripts and not regular ones (postscript is not a compressed format).
- make a book with all of the standards.
	- how do I include all the files? Should I write a script?!?
- make the build system produce a .gitignore file (make the .gitignore file be a target
	of the build system dependent on everything including the makefile itself).
- add an option to find lyi files which are not used (not included anywhere).

outof lilypond lyrics support:
==============================
- add lyrics to the system.
- store the lyrics inside the lilypond file so that there will be only one source file.
- extract the lyrics somehow and turn it into a blob.
- store the blob in the database and allow to download and view it.
- syntax check the lyrics.

wav support (this is currently disabled):
=========================================
- reduce the size of the wav files (why are some of them so big?!?).
	this causes their import to be aborted (this is why it is currently disabled).

mp3 support:
============
- there are no tags in the mp3 files. Add them.

ogg support:
============
- there are no tags in the ogg files. Add them.

midi support:
=============
- wikipedia have a way of playing midi directly from the wiki pages.
	find out how. Do that from my page too.

Lilypond cheet sheet
====================
- create a standards/lead sheet cheet sheet for lilypond.
- cheet sheet should show:
	- complex chords (7.5-)
	- chords with alternate bases.
	- matching lyrics to melody.
		many words per one note
		splitting a word
	- the thing to type at \chords in order that chords will re-appear if when
		they are not changed.
	- changing the speed of the tune
	- all the rest on the stuff I have in hints.txt.
	* once the cheet sheet it done I can get ridd of the hints.txt file.


Info addition
=============
- add "poet="poetname"" header in all the pieces.
- add "copyright" header in all the pieces.
- add "todo" in all the pieces in the same style.
- add "completion level" in all the pieces. define completion levels and mark them out.
	put them in the database.
	show them on the php.
- add "tags" header in all the pieces (jazz, swing, bossa etc...).
- make all of tunes have the same high level structure as "a_foggy_day.ly". This is much
	better because:
	- You don't have to have a stupid strucutre at the end which is replicated for each
	tune (or included).
	- Stuff gets in the sheet or out of it (tune, harmony, lyrics) according to whether
	it is there. When you add or remove stuff you just add or remove it - no need to update
	the master structure context.
	Record all of these understandings in some kind of standards document that I will
	start for all of this material.
- get number of pages and import that into the database too.
	How do we get it?!?
	- count the number of pages in the pdf (some kind of pdf parser?!?).
	- count the number of images created when --png is used.

Database additions
==================
- get last changed date (the data of the *.ly file?!?) and put it in the database
	on import. Show it in on the web.
	Enable a direct link to a files history from git from the web.
- add links to my favourite performances of the tune.
- assume many jpegs and many midis per compilation. Store them all in the database.
- make all the blobs reside in a blob table and make get blob really simple by getting
	from that table either by uuid or by id.

book generation tweaks:
=======================
- make the copyright and tagline be at the bottom of each last page of every tune instead of directly after.
- have the table of content contain the names of the composers/poets too.
- add a last page.
- add the ability to have page numbers on ALL pages. by default lilypond only puts page numbers on even numbered
	pages.
- add much more information on the first page:
	ip of the computer doing the build.
	checksum of the input.
	links to the openbook website and to openbook on github and to my own blog,
		and to the lilypond website.
		and to my email.
	version of the operating system used to build the book.
	number of commits in git.
- consider moving the format of the copyright to the way it is done in the fakebook:
	the copyright is on the left in small print, the poet and composer are on the right
	in bigger print.
- in the books table of content there are problems when the name(s) of the poets are also
	the name(s) of the composers. Take a look at "What A Wonderful World" to see an example.
	Fix this. The best way would be to gather names of composers and poets, unique them,
	then put the composers first. This would require a bit of python code to fix.

checking of tunes:
==================
- look for \endSong and then a newline between it and \endChords.
	This needs to be done via an improvement of pgrep.pl since pgrep cannot
	scan for patterns that span more than one line.
- cat * | grep uuid | sort | uniq | wc -l
	is used to check that each tune has a unique uuid. do it this way or some other
	way but check this as part of check_all also.
- make the checks be part of the build and make the build fail if some of the checks fail.

openbook website:
=================
- consider using pdf.js from mozilla in order to show pdf in my site.
- consider doing a site along the lines of wikifonia.
- in the wikifonia site they are showing pdfs somehow. Find the component that they are using and use it myself.
	Check that it works on all browsers.
- add all the stuff that I have in my blog to the website.
- make it more beautiful.
- add paypal donation to the project.
- add the ability to ask me for specific standards.
- add a form whereby people can register who they are if they are using the book.
- when I link to the website from facebook the website icon does not show.
	Is it about <meta> tags in the html? Find out how to do it right...
